{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport 'core-js/shim';\n\nimport {\n  Source,\n  parse,\n  concatAST,\n  buildASTSchema,\n} from 'graphql';\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as express from 'express';\nimport * as graphqlHTTP from 'express-graphql';\nimport chalk from 'chalk';\nimport * as opn from 'opn';\nimport * as cors from 'cors';\nimport * as bodyParser from 'body-parser';\nimport { pick } from 'lodash';\nimport * as yargs from 'yargs';\n\nimport { fakeSchema } from './fake_schema';\nimport { proxyMiddleware } from './proxy';\nimport { existsSync } from './utils';\n\nconst argv = yargs\n  .command('$0 [file]', '', cmd => cmd.options({\n    'port': {\n      alias: 'p',\n      describe: 'HTTP Port',\n      type: 'number',\n      requiresArg: true,\n      default: process.env.PORT || 9002,\n    },\n    'open': {\n      alias: 'o',\n      describe: 'Open page with IDL editor and GraphiQL in browser',\n      type: 'boolean',\n    },\n    'cors-origin': {\n      alias: 'co',\n      describe: 'CORS: Specify the custom origin for the Access-Control-Allow-Origin header, by default it is the same as `Origin` header from the request',\n      type: 'string',\n      requiresArg: true,\n    },\n    'extend': {\n      alias: 'e',\n      describe: 'URL to existing GraphQL server to extend',\n      type: 'string',\n      requiresArg: true,\n    },\n    'header': {\n      alias: 'H',\n      describe: 'Specify headers to the proxied server in cURL format, e.g.: \"Authorization: bearer XXXXXXXXX\"',\n      type: 'string',\n      requiresArg: true,\n      implies: 'extend',\n    },\n    'forward-headers': {\n      describe: 'Specify which headers should be forwarded to the proxied server',\n      type: 'array',\n      implies: 'extend',\n    },\n  }))\n  .strict()\n  .help('h')\n  .alias('h', 'help')\n  .epilog(`Examples:\n\n  # Mock GraphQL API based on example IDL and open interactive editor\n  $0 --open\n\n  # Extend real data from SWAPI with faked data based on extension IDL\n  $0 ./ext-swapi.grqphql --extend http://swapi.apis.guru/\n\n  # Extend real data from GitHub API with faked data based on extension IDL\n  $0 ./ext-gh.graphql --extend https://api.github.com/graphql \\\\\n  --header \"Authorization: bearer <TOKEN>\"`)\n  .argv\n\n\nconst log = console.log;\n\nlet headers = {};\nif (argv.header) {\n  const headerStrings = Array.isArray(argv.header) ? argv.header : [argv.header];\n  for (const str of headerStrings) {\n    const index = str.indexOf(':');\n    const name = str.substr(0, index).toLowerCase();\n    const value = str.substr(index + 1).trim();\n    headers[name] = value;\n  }\n}\n\nconst forwardHeaderNames = (argv.forwardHeaders || []).map(\n  str => str.toLowerCase()\n);\n\nconst fileName = argv.file || (argv.extend ?\n  './schema_extension.faker.graphql' :\n  './schema.faker.graphql');\n\n\nif (!argv.file) {\n  log(chalk.yellow(`Default file ${chalk.magenta(fileName)} is used. ` +\n  `Specify [file] parameter to change.`));\n}\n\nconst fakeDefinitionAST = readAST(path.join(__dirname, 'fake_definition.graphql'));\nconst corsOptions = {}\n\ncorsOptions['credentials'] =  true\ncorsOptions['origin'] = argv.co ? argv.co : true\n\nlet userIDL;\nif (existsSync(fileName)) {\n  userIDL = readIDL(fileName);\n} else {\n  // different default IDLs for extend and non-extend modes\n  let defaultFileName = argv.e ? 'default-extend.graphql' : 'default-schema.graphql';\n  userIDL = readIDL(path.join(__dirname, defaultFileName));\n}\n\nfunction readIDL(filepath) {\n  return new Source(\n    fs.readFileSync(filepath, 'utf-8'),\n    filepath\n  );\n}\n\nfunction readAST(filepath) {\n  return parse(readIDL(filepath));\n}\n\nfunction saveIDL(idl) {\n  fs.writeFileSync(fileName, idl);\n  log(`${chalk.green('✚')} schema saved to ${chalk.magenta(fileName)} on ${(new Date()).toLocaleString()}`);\n  return new Source(idl, fileName);\n}\n\nif (argv.e) {\n  // run in proxy mode\n  const url = argv.e;\n  proxyMiddleware(url, headers)\n    .then(([schemaIDL, cb]) => {\n      schemaIDL = new Source(schemaIDL, `Inrospection from \"${url}\"`);\n      runServer(schemaIDL, userIDL, cb)\n    })\n    .catch(error => {\n      log(chalk.red(error.stack));\n      process.exit(1);\n    });\n} else {\n  runServer(userIDL, null, schema => {\n    fakeSchema(schema)\n    return {schema};\n  });\n}\n\nfunction buildServerSchema(idl) {\n  var ast = concatAST([parse(idl), fakeDefinitionAST]);\n  return buildASTSchema(ast);\n}\n\nfunction runServer(schemaIDL: Source, extensionIDL: Source, optionsCB) {\n  const app = express();\n\n  if (extensionIDL) {\n    const schema = buildServerSchema(schemaIDL);\n    extensionIDL.body = extensionIDL.body.replace('<RootTypeName>', schema.getQueryType().name);\n  }\n  app.options('/graphql', cors(corsOptions))\n  app.use('/graphql', cors(corsOptions), graphqlHTTP(req => {\n    const schema = buildServerSchema(schemaIDL);\n    const forwardHeaders = pick(req.headers, forwardHeaderNames);\n    return {\n      ...optionsCB(schema, extensionIDL, forwardHeaders),\n      graphiql: true,\n    };\n  }));\n\n  app.get('/user-idl', (_, res) => {\n    res.status(200).json({\n      schemaIDL: schemaIDL.body,\n      extensionIDL: extensionIDL && extensionIDL.body,\n    });\n  });\n\n  app.use('/user-idl', bodyParser.text({limit: '8mb'}));\n\n  app.post('/user-idl', (req, res) => {\n    try {\n      if (extensionIDL === null)\n        schemaIDL = saveIDL(req.body);\n      else\n        extensionIDL = saveIDL(req.body);\n\n      res.status(200).send('ok');\n    } catch(err) {\n      res.status(500).send(err.message)\n    }\n  });\n\n  app.use('/editor', express.static(path.join(__dirname, 'editor')));\n\n  const server = app.listen(argv.port);\n\n  const shutdown = () => {\n    server.close();\n    process.exit(0);\n  };\n\n  process.on('SIGINT', shutdown);\n  process.on('SIGTERM', shutdown);\n\n  log(`\\n${chalk.green('✔')} Your GraphQL Fake API is ready to use 🚀\n  Here are your links:\n\n  ${chalk.blue('❯')} Interactive Editor:\\t http://localhost:${argv.port}/editor\n  ${chalk.blue('❯')} GraphQL API:\\t http://localhost:${argv.port}/graphql\n\n  `);\n\n  if (argv.open) {\n    setTimeout(() => opn(`http://localhost:${argv.port}/editor`), 500);\n  }\n}\n"]}