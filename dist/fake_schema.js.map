{"version":3,"file":"fake_schema.js","sourceRoot":"","sources":["../src/fake_schema.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Kind,\n  isLeafType,\n  isAbstractType,\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLAbstractType,\n  GraphQLOutputType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLEnumType,\n  GraphQLLeafType\n} from \"graphql\";\n\nimport { getRandomInt, getRandomItem, typeFakers, fakeValue } from \"./fake\";\n\ninterface GraphQLAppliedDiretives {\n  isApplied(directiveName: string): boolean;\n  getAppliedDirectives(): Array<string>;\n  getDirectiveArgs(directiveName: string): { [argName: string]: any };\n}\n\ntype FakeArgs = {\n  type: string;\n  options: { [key: string]: any };\n  locale: string;\n};\ntype ExamplesArgs = {\n  values: [any];\n};\ntype DirectiveArgs = {\n  fake?: FakeArgs;\n  examples?: ExamplesArgs;\n};\n\nconst stdTypeNames = Object.keys(typeFakers);\n\nfunction astToJSON(ast) {\n  switch (ast.kind) {\n    case Kind.NULL:\n      return null;\n    case Kind.INT:\n      return parseInt(ast.value, 10);\n    case Kind.FLOAT:\n      return parseFloat(ast.value);\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n      return ast.value;\n    case Kind.LIST:\n      return ast.values.map(astToJSON);\n    case Kind.OBJECT:\n      return ast.fields.reduce((object, { name, value }) => {\n        object[name.value] = astToJSON(value);\n        return object;\n      }, {});\n  }\n}\n\nexport function fakeSchema(schema: GraphQLSchema) {\n  const mutationType = schema.getMutationType();\n  const jsonType = schema.getTypeMap()[\"examples__JSON\"];\n  jsonType[\"parseLiteral\"] = astToJSON;\n\n  for (const type of Object.values(schema.getTypeMap())) {\n    if (\n      type instanceof GraphQLScalarType &&\n      !stdTypeNames.includes(type.name)\n    ) {\n      type.serialize = value => value;\n      type.parseLiteral = astToJSON;\n      type.parseValue = x => x;\n    }\n    if (type instanceof GraphQLObjectType && !type.name.startsWith(\"__\"))\n      addFakeProperties(type);\n    if (isAbstractType(type)) type.resolveType = obj => obj.__typename;\n  }\n\n  function addFakeProperties(objectType: GraphQLObjectType) {\n    const isMutation = objectType === mutationType;\n\n    for (const field of Object.values(objectType.getFields())) {\n      if (isMutation && isRelayMutation(field))\n        field.resolve = getRelayMutationResolver();\n      else field.resolve = getFieldResolver(field, objectType);\n    }\n  }\n\n  function isRelayMutation(field) {\n    const args = field.args;\n    if (args.length !== 1 || args[0].name !== \"input\") return false;\n\n    const inputType = args[0].type;\n    // TODO: check presence of 'clientMutationId'\n    return (\n      inputType instanceof GraphQLNonNull &&\n      inputType.ofType instanceof GraphQLInputObjectType &&\n      field.type instanceof GraphQLObjectType\n    );\n  }\n\n  function getFieldResolver(field, objectType) {\n    const fakeResolver = getResolver(field.type, field);\n    return (source, _0, _1, info) => {\n      if (source && source.$example && source[field.name]) {\n        return source[field.name];\n      }\n\n      const value = getCurrentSourceProperty(source, info.path);\n      return value !== undefined ? value : fakeResolver(objectType);\n    };\n  }\n\n  function getRelayMutationResolver() {\n    return (source, args, _1, info) => {\n      const value = getCurrentSourceProperty(source, info.path);\n      if (value instanceof Error) return value;\n      return { ...args[\"input\"], ...value };\n    };\n  }\n\n  // get value or Error instance injected by the proxy\n  function getCurrentSourceProperty(source, path) {\n    return source && source[path!.key];\n  }\n\n  function getResolver(type: GraphQLOutputType, field) {\n    if (type instanceof GraphQLNonNull) return getResolver(type.ofType, field);\n    if (type instanceof GraphQLList)\n      return arrayResolver(getResolver(type.ofType, field));\n\n    if (isAbstractType(type)) return abstractTypeResolver(type);\n\n    return fieldResolver(type, field);\n  }\n\n  function abstractTypeResolver(type: GraphQLAbstractType) {\n    const possibleTypes = schema.getPossibleTypes(type);\n    return () => ({ __typename: getRandomItem(possibleTypes) });\n  }\n}\n\nfunction fieldResolver(type: GraphQLOutputType, field) {\n  const directiveToArgs = {\n    ...getFakeDirectives(type),\n    ...getFakeDirectives(field)\n  };\n  const { fake, examples } = directiveToArgs;\n\n  if (isLeafType(type)) {\n    if (examples) return () => getRandomItem(examples.values);\n    if (fake) {\n      return () => fakeValue(fake.type, fake.options, fake.locale);\n    }\n    return getLeafResolver(type);\n  } else {\n    // TODO: error on fake directive\n    if (examples) {\n      return () => ({\n        ...getRandomItem(examples.values),\n        $example: true\n      });\n    }\n    return () => ({});\n  }\n}\n\nfunction arrayResolver(itemResolver) {\n  return (...args) => {\n    let length = getRandomInt(10, 20);\n    const result = [];\n\n    while (length-- !== 0) result.push(itemResolver(...args));\n    return result;\n  };\n}\n\nfunction getFakeDirectives(object: any) {\n  const directives = object[\"appliedDirectives\"] as GraphQLAppliedDiretives;\n  if (!directives) return {};\n\n  const result = {} as DirectiveArgs;\n  if (directives.isApplied(\"fake\"))\n    result.fake = directives.getDirectiveArgs(\"fake\") as FakeArgs;\n  if (directives.isApplied(\"examples\"))\n    result.examples = directives.getDirectiveArgs(\"examples\") as ExamplesArgs;\n  return result;\n}\n\nfunction getLeafResolver(type: GraphQLLeafType) {\n  if (type instanceof GraphQLEnumType) {\n    const values = type.getValues().map(x => x.value);\n    return () => getRandomItem(values);\n  }\n\n  const typeFaker = typeFakers[type.name];\n  if (typeFaker) return typeFaker.generator(typeFaker.defaultOptions);\n  else return () => `<${type.name}>`;\n}\n"]}